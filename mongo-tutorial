# Mongo Introduction
It is a document oriented database management system and works on document based database.
Mondodb stores data in form of documents.
Mongodb uses bson(binary json) format data to store databse which is optimized for speed, space and flexibility.
Store in table in RDBMS but in MongoDb stores in collection(array) and each row in table as document and column in RDBMS but in mongo it is called fields

## 1 create databse, collections, document
#### create database
  `use jaysoft` [to create database and switch to it]
  
### show available databse
  `show dbs`
  
### to view collection on current database
  `show collections`
  
### to view document 
  `db.jaysoft.find()`
  
### to show document in pretty format from the database
    `db.jaysoft.find().pretty()`

## 2. CRUD
db.collection_name.insertOne() => inserting only one document
db.colleciton_name.insertMany() => inserting many document at a single time

### to view which database is currently active
  `db`
  
### to insert one document 
  `db.jaysoft.insertOne({})`
  
### to insert multiple document
  `db.jaysoft.insertMany`
  
## 3 Read ir queries
 
 ### Retrive certain document
 `db.jaysoft.find(query, projection)`
 example: db.jaysoft.find({name: "MongoDB"})
 
 ### retrive certain field of certain document
  `db.jaysoft.find({name: "MongoDB", {_id: 0, name:1}})`
 
 ### retrive first document with field name and value match
  `db.jaysoft.find({active:true}).pretty()`
  
### retrieve only one document with certain field and value but skipping first one
  `db.jaysoft.find({active:true}).pretty().limit(1).skip(1)`
  
  
 ## 4. Update Operation
  UpdateOne() => db.Collection_name.updateOne(<filter>,<update>)
    `db.jaysoft.updateOne({name:"Javascript"}, {$set: {type: "Full Stack"}})`
    
  UpdateMany() => db.colleciton.name.update(<filter>, <update>)
    `db.jaysoft.updateMany({active:true}, {$set: {type: "full stack"}})`
    
 ## 5. delete document with deletion criteria
  `deleteMany() => db.collection_name.deleteMany(Deletion_criteria)`
  
  delete collection
    `db.collection_name.deleteMany({})`
    
    
 Mongo Compass for GUI operation for easy access rather than mongo shell on CMD
 
 Mongoose => framework for establishing connection between nodejs, express js to mongo
 
 Mongoose is an Object Data Modeling(ODM) library for MongoDB and Node.js. It manages relationships between data, provides schema validation, and is used to translate between
 objects in code and the representation of those objects in MongoDB.
 
 
 ## 6. Mongoose schema and models explanation and create collection using mongoose
  After installation of mongoose connect with the db using
    `mongoose. connect("database_path")`
    
 // schema
 // A Mongoose schema defines the structure of the document,
 // default values, validators, etc.,
  
  
 //A Mongoose model is a wrapper on the Mongoose schema.
// A Mongoose schema defines the structure of the document,
// default values, validators, etc., whereas a Mongoose model 
// provides an interface to the database for creating,
// quering, updating, deleting records, etc.

// collection creation
// new mongoose.model("collection_name", schema_instance)
