## What is Express.js
  ` Express.js is a Node.js Framework. It's the most popular framework as of now (the most starred on NPM).
  ExpressJS is a web application framework that provides you with a simple API to build websites, web apps and back ends.
  `
  
  ## why do we actually need Express.js? How it is useful for us to use with Node.js?
    try to write a small Rest API server in plain Node.js (that is , using only core modules) and then in Express.js. The latter will take you 5-10x less time and lines of code.

## Features
  1. Robust routing
  2. Focus on high performance
  3. Super-high test coverage
  4. HTTP helpers (redirection, caching, etc)
  5. View system supporting 14+ template engines
  6. Content negotiation
  7. Executable for generating applications quickly



## Express code
`const express = require("express");
 const app = express();

 app.get(route, callback)
 app.get("/", (req,res))
 `
 
 ### THe callback function has 2 paramters, request(req) and response(res). THe request object(req) represents the HTTP request and has properties for the request query
 string, parameters, body, HTTP headers, etc.
 ### Similarly, the response object represents the HTTP response that the Express app sends when it receive an HTTP request.
 
 
# Express JS is mostly useful for API and routing


# Express JS routing
# send html & json data as a response using Express js


# Serving static files in Express
  To serve static files such as images, CSS files, and JS files, use the express.static built-in middleware funciton in Express.
  The function signature is:
    `express.static(root, [options])`
    The root argument specifies the root directory from which to serve static assets, For more informaiton on thje options argument, see express.static.
    
 # Using template engines with Express
  A template engine enables you to use static template files in your application. At runtime, the template engine replaces variables in a 
  template file with actual values, and transforms the template into an HTML file sent to the client. THis approach makes it easier to design an HTML page.
  
  Some popular template engines that work with Express are Pug, Mustache, and EJS. The Express application generator uses Jade as its default, but it also supports several
  others.

#using hbs(handlebars)
  First set which engine to choose for dynamic web content flow
  `
  app.set("view engine", "hbs")
  `
  
  to render the funciton
    app.get("", (req, res)=> {
    res.render("index", {
    hbs: "thaps"

# in hbs file {{hbs}} to render hbs data //double curly braces for dynamic content output


#Customzing the views directory
# Using Partials in Express
  Partials is like component in which the component are called in main index.hbs using {{>}}

# routing the page not found url(rendering common page)
  `app.get('*', (req, res)=> {
    res.render("404", {
      errorcomment: "Oops the page not found"
    }
  })`
  
 # routing the page about/* page
  `app.get('/about/*', (req, res)=> {
    res.render("404", {
      errorcomment: "Oops the page not found"
    }
  })`
  
