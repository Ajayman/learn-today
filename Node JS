# Node Tutorial in Hindi 2023
# 1. Introduction to node js
## Node JS
 1. Node.js is a Javascript runtime built on Chrome's V8 javascript Engine
 2. Node.js is  
 
## History Of Nodejs
  In 2009 an idea came in the mind of Ryan Dahl (Google Engineer) that why not run JavaScript outside browser, so he took V8 engine and embeded in a C++ program
  and called it Node.exe lateron became Nodejs.
  
## When to use Node js?
  1. I/O bound
  2. Data Streaming Applications
  3. Real Time Application
  
# Prerequist for Node js  
## Node JS Prerequisites
 1. Basic JS(Advanced JS will be bonus)
 2. ES5 and ES6 | ECMAScript 6
 3. Client Server MOdel(Optional)
 
# REPL in node js
## Nodel JS REPL
 THe REPL features of Node is very useful in experimenting with Node.js codes and to debug Javascript codes.
 
 Read - Reads user's input, parsest he input into Javascript data-structure, and stores in memory.
 Eval- Takes and evaluates the data structure.
 print - Prints the result.
 Loop - Loops the above command until the user presses ctrl-c twice.



## Create File
 `type nul > index.js`
 
 # REPL
  1. js Expression
  2. use variables
  3. Multiline code
  4. use (_) to get the last result
  5. we can use editor mode


# Mastering Node Js COre Modules

## Node JS Core Modules
 Consider modules to be the same as JS Libraries. A set of function s you want to inculude in your application.
 Node.js has a set of built-in modules which you can use without any further installation.
 
 
## creating a new file
fs.writeFIleSync("file_name", "welcome")

## to append on previous data of file
fs.appendFileSync("file_name", "how are you")


## const buf-data = fs.readFileWSunc("file_name")

Node.js includes an additional data type called Buffer (not available in browser's JS).
Buffer is mainly used to store binary data,
while reading from a file or receiginf packets over the network

## to convert binary data into string
`binary_file.toString()`


## to rename the file
 fs.renameSync("file_name.txt", "file_rename");


# CRUD operations using FS Module in NodeJS



# Async and Synch

// here the data is read synchrounously first the data is read whether it takes longer time only then after the data is printed in console.
`const fs = require("fs");
const data = fs.readFileSync("read.txt","utf8");
console.log(data);
console.log("after the data");

`
// here it is an example of asynch where the after the data is printed on console first than reading data
`const fs = require("fs");
const data = fs.readFile("read.txt","utf8", (err,data)=>{console.log(data)});
console.log("after the data");
`


#import and export/ require
 In common js before we use `require('module_name')` to invoke a module but now we use import and export (ES6 module) to invoke module one from other.


#nodemon
 reloads server when any changes occur.
 
# nodemon installation
 when installed delete nodemon.ps1 on the installation directory.
 

# IIFE on javascript or wrapper function in nodejs
 Immediately Invoked Function Expression is a design pattern which is also known as a Self-Executing Anonymous function and contains two major parts.
 node js add code to module wrapper function which makes code private and execute when the module or that file is executed
It is a design pattern which is also known as a Self-Executing Anonymous Function and contains two major parts.
1. The first is the anonymous funciton with lexical scope enclosed with the Grouping Operator (). This prevents accessing variables within the IIFE idiom as well as 
polluting the global scope.
2. The second part created the immediately invoked function expression() through which the JS engine will directly interpret the function.



 # Node.js Web Server
 To access web pages of any web application, you need a web server. The web server will handle all the http requests for the web applicaiton.
 eg. IIS is a web server for ASP.NET web applications and Apache is a web server for PHP or Java web applications.
 Node.js provides capabilities to create your own web server which will handle HTTP requests asynchronously. You can use IIS or Apache to run Node.js web application
 but it is recommended to use Node.js web server.
 
 `
 const http = require('http');
 const server = http.createServer((req, res) => {
  res.send("Hello text")
 })
 
 server.listen(8000, "127.0.0.1", () => {
  console.log("listening to the port no 8000")
 })
 `
 
 ## When nothing server is responding to url request then go to control panel and program and feature and check iis and iis hostabel web core
 
 # Node JS Routing
  `req.url` will return current url path.
  there are many request properties like
  request.end, request.connection, request.finish, request.getHeader,request.setHeader(name,value)


# JSON in Node Js
 JSON stands for JS Object Notation. JSON is a lightweight format for storing and transoorting data.
 Json is often used when data is sent from a server to a web page.
 
 JSON.stringify(js_object) to convert js object to json 
 JSON.parse(json_file) to convert json object to js object
 
 
# simple API in Node Js
 Api is a software intermediary that allows two applications to talk to each other. API is a like a service where data can be requested. 
 Read Json file through node js file system and convert to js object.


# Streams (an abstract interface)
 Streams are objects that let you read data from a source or write data to a destination in continuous fashion. IN Node.js, there are four types of streams-
 
 Streaming means listening to music or watching video in 'real time', instead of downloading a file to your computer and watching it later
 
 Readable - Stream which is used for read operation.
 Writable - Stream which is used for write opearation
 Duplex - Stream which can be used for both read and write operation.
 Transform - A type of duplex stream where the output is computed based on input.
 
 Each type of Stream is an EventEmitter instance and throws several events at different instance of times. For example, some of the commonly used events are -
 data - This event is fired when there is data is availbale to read. 
 End  - This event is fired when there is no more data to read
 error - this event is fired wehen there is any erro receiving or writign data
 finish -  this event is fired when all the data has been flushed to underlying system
